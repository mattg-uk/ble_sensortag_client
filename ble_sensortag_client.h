
#ifndef ST_CLIENT_H
#define ST_CLIENT_H

/**@file
 *
 * @brief    SensorTag Client module.
 *
 * @details  This module contains the APIs and types exposed by the SensorTag Service Client
 *           module. These APIs can be used to initialize the service for discovery, which
 *           will start the the service discovery process. 
 *           Upon resolution, the necessary SensorTag service handles will be stored, and the 
 *           user will be called back with an event. At this point, the user can call the
 *           enable service function, and then will begin receiving user data events at their
 *           handler.
 *
 * @note     The application must propagate BLE stack events to this module by calling
 *           st_client_on_ble_evt().
 *
 */

#include <stdint.h>
#include <stdbool.h>

#include "ble.h"
#include "ble_db_discovery.h"

// The SensorTag only broadcasts the UUID of the movement service in the advertising packet
// To identify other services, you must connect.

#define BLE_UUID_ST_BASE_UUID           {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x40, 0x51, 0x04, 0x00, 0x00, 0x00, 0xf0}} /**< Used vendor specific UUID. */
#define BLE_UUID_ST_MVMT_SERVICE        0xaa80                      /**< The UUID of the SensorTag Movement Service. */
#define BLE_UUID_ST_LUXO_SERVICE        0xaa70                      /**< The UUID of the SensorTag Luxometer Service. */
#define BLE_UUID_ST_TEMP_SERVICE        0xaa00

#define CONF_CHRC_MSG_LEN        1 

/* Most of the SensorTag services have three characteristics: DATA, CONFiguration, PERIod */
typedef enum {
    DATA_UUID_OFFSET = 1,
    CONF_UUID_OFFSET,
    PERI_UUID_OFFSET
} st_uuid_offsets_t;

/* Client event object and event types, configuration object and its associated handler ------------------------------------------------------- */

/**@brief SensorTag Client event type. */
typedef enum
{
    ST_CLIENT_EVT_DISCONNECTED,              // Event indicating that the ST has disconnected
    ST_CLIENT_EVT_LUXO_DISCOVERED,           // Event indicating that the LUXO service is discovered 
    ST_CLIENT_EVT_TEMP_DISCOVERED,           // Event indicating that the TEMP service is discovered 
    ST_CLIENT_EVT_LUXO_DATA,                 // Event indicating that the LUXO service has data 
    ST_CLIENT_EVT_TEMP_DATA,                 // Event indicating that the TEMP service has data 
} st_client_evt_type_t;


/**@brief SensorTag data with validity flag
*/
typedef struct 
{
    bool                valid;
    union
    {
        uint16_t        luxo_data;
        struct
        {
            float       ir_data;
            float       amb_data;
        } temp_data;
    };
} st_client_data_t;

/**@brief Structure containing the peer event type and data after processing by the ST module. */
typedef struct {
    st_client_evt_type_t evt_type;
    uint16_t            conn_handle;
    uint8_t             *p_data;
    uint8_t             data_len;
} st_client_evt_t;


/**@brief Client events generated by this service 
*/
typedef struct
{
    uint16_t            discovered;
    uint16_t            data_ready; 

} st_client_svc_evts_t;

/**@brief Indices of the handles for the connected peer device in this service
*/
typedef enum {
    DATA = 0,       // handle for data characteristic of LX service (light level)
    DATA_CCCD,      // Client Characteristic Configuration Descriptor (0x2902) 
    CONF,           // handle for conf characteristic, to switch LX service ON/OFF ,
    PERI,           // handle for period characteristic, controls data reading frequency
    HANDLES_MAX     // Upper bound this enum 
} st_client_handl_indices_t;

/**@brief  required to operate the service 
*/
typedef struct {
    uint16_t            uuid;
    uint8_t             name[5];
    uint16_t            handles[4];
    st_client_svc_evts_t events;
} st_client_svc_t;


typedef struct st_client_s st_client_t;

/**@brief   BLE SensorTag Client event handler type  
 *
 * @details This is the type of the event handler that should be provided by the application
 *          to receive events from this module. The handler takes a pointer to its parent object
 */
typedef void (* st_client_evt_handler_t)(st_client_t * p_st_client, const st_client_evt_t * p_evt);



/**@brief BLE SensorTag Client structure.
 */
struct st_client_s
{
    uint16_t                conn_handle;        
    uint8_t                 uuid_type;         
    uint8_t                 service_count;    
    st_client_evt_handler_t  evt_handler;     
    st_client_svc_t          services[2];    
};


/**@brief      Add the base uuid for discovery or advertising
 *
 * @details    Contains a pre-encoded list of UUIDs to add; does this in a single step 
 *
 */
uint32_t st_client_add_vs_base_uuid(st_client_t * p_st_client);

/**@brief SensorTag Client initialization structure.
 */
typedef struct {
    st_client_evt_handler_t  evt_handler;
} st_client_init_t;


/**@brief     Function for initializing the SensorTag client module.
 *
 * @details   This function registers with the Database Discovery module
 *            for the ST. Doing so will make the Database Discovery
 *            module look for the presence of a SensorTag  instance at the peer when a
 *            discovery is started.
 *
 * @param[in] p_st_client        Pointer to the ST client structure.
 * @param[in] p_st_client_init   Pointer to the initialization structure containing the
 *                              initialization information.
 *
 * @retval    NRF_SUCCESS If the module was initialized successfully. Otherwise, an error 
 *                        code is returned. This function
 *                        propagates the error code returned by the Database Discovery module API
 *                        @ref ble_db_discovery_evt_register.
 */
uint32_t st_client_init(st_client_t * p_st_client, st_client_init_t * p_st_client_init);


/**@brief     Obtain a full typed UUID from the ST client based on a short UUID 
 *
 * @param[in] p_st_client        Pointer to the ST client structure.
 * @param[in] uuid              2 byte short UUID
 */
ble_uuid_t st_client_get_typed_uuid(st_client_t* p_st_client, uint16_t uuid);

/**@brief   Function for handling events from the database discovery module.
 *
 * @details This function will handle an event from the database discovery module, and determine
 *          if it relates to the discovery of an SensorTag at the peer. If so, it will
 *          call the application's event handler indicating that ST has been
 *          discovered at the peer. It also populates the event with the service related
 *          information before providing it to the application.
 *
 * @param[in] p_st_client    Pointer to the SensorTag client structure.
 * @param[in] p_evt         Pointer to the event received from the database discovery module.
 */
void st_client_on_db_disc_evt(st_client_t * p_st_client, ble_db_discovery_evt_t * p_evt);


/**@brief     Function for handling BLE events from the SoftDevice.
 *
 * @details   This function handles the BLE events received from the SoftDevice. If a BLE
 *            event is relevant to the ST module, it is used to update
 *            internal variables and, if necessary, send events to the application.
 *
 * @param[in] p_st_client    Pointer to the ST client structure.
 * @param[in] p_ble_evt     Pointer to the BLE event.
 */
void st_client_on_ble_evt(st_client_t * p_st_client, const ble_evt_t * p_ble_evt);


/**@brief   Request the peer to start sending notifications for a specific SERVICE.
 
 * @details This function enables notifications of the DATA characteristic at the peer
 *          by writing to the CCCD of DATA characteristic for the specified SERVICE.
 *
 * @param   p_st_client      Pointer to the SensorTag client structure.
 * @param   service_uuid    UUID short code of the service (not the characteristic)
 * @param   enable          true = activate, false = deactivate 
 * 
 * @retval  NRF_SUCCESS If the SoftDevice has been requested to write to the CCCD of the peer.
 *                      Otherwise, an error code is returned. This function propagates the error  
 *                      code returned by the SoftDevice API @ref sd_ble_gattc_write.
 */
uint32_t st_client_data_notify(st_client_t *p_st_client, uint16_t service_uuid, bool enable);


/**@brief   Function for requesting the peer to enable / disable the SERVICE. 
 *          Not only must notifications for the DATA chrc be enabled, but also this function
 *          must be called to physically switch the service on.
 *
 * @details This function direct writes into the CONF chrc.
 *
 * @param   p_st_client      Pointer to the SensorTag client structure.
 * @param   service_uuid    UUID short code of the service (not the characteristic)
 * @param   enable          true = activate, false = deactivate 
 *
 * @retval  NRF_SUCCESS If the SoftDevice has been requested to write to the CCCD of the peer.
 *                      Otherwise, an error code is returned. This function propagates the error  
 *                      code returned by the SoftDevice API @ref sd_ble_gattc_write.
 */
uint32_t st_client_conf_enable(st_client_t *p_st_client, uint16_t service_uuid, bool enable);

/**@brief   Helper function to switch on a service and enable notifications. Reports
 *          errors via printf.
 *
 * @details Calls st_client_conf_enable and st_client_data_start_notify 
 *
 * @param   p_st_client  Pointer to the ST client structure.
 * @param   service_uuid    UUID short code of the service (not the characteristic)
 * @param   enable      true = enable, false = disable
 */
uint32_t service_enable(st_client_t *p_st_client, uint16_t service_uuid, bool enable);


/**@brief   Retreive data from a SensorTag Client event
 *
 * @details Converts the data in the data buffer 
 *
 * @param   p_st_c_evt  Pointer to the ST Event
 */
st_client_data_t extract_luxometer_data(const st_client_evt_t * p_st_c_evt);

/**@brief   Retreive data from a SensorTag Client event
 *
 * @details Converts the data in the data buffer 
 *
 * @param   p_st_c_evt  Pointer to the ST Event
 */
st_client_data_t extract_temperature_data(const st_client_evt_t * p_st_c_evt);

#endif // ST_CLIENT_H
